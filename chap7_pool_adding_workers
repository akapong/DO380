[student@workstation pools-adding-workers]$ pwd
/home/student/DO380/labs/pools-adding-workers
[student@workstation pools-adding-workers]$ ls
approve-csrs.sh  prep-utility.yml
[student@workstation pools-adding-workers]$ cat approve-csrs.sh 
#!/bin/bash

count=0
previous=0

while [ ${count} -lt 6 ]; do
    # Count nodes named "worker" and output if the number has changed
    count=$(oc get nodes -o name | grep worker | wc -l)
    if [ ${previous} -ne ${count} ]; then
        echo "Worker count is ${count}."
        previous="${count}"
    fi

    # Approve pending CSRs
    oc get csr -o json | jq '.items[] | select(.status == {}) | .metadata.name' | xargs -r oc adm certificate approve

    sleep 2
done
[student@workstation pools-adding-workers]$ cat prep-utility.yml 
---
- name: Add new workers
  hosts: utility
  vars:
    pxe_path: "/var/lib/tftpboot/pxelinux.cfg/"
  tasks:
    - name: Set worker.ign fact
      set_fact:
        worker_ign: "/var/www/html/openshift4/ignitions/ocp4/worker.ign"

    - name: Fetch the api-int certificate
      get_certificate:
        host: api-int.ocp4.example.com
        port: 22623
      register: updated_cert

    - name: Create updated Ignition content
      command: >
        jq ".ignition.security.tls.certificateAuthorities[0].source = \"data:text/plain;charset=utf-8;base64,{{ updated_cert.cert | b64encode }}\"" "{{ worker_ign }}"
      register: updated_ign

    - name: Write worker Ignition file
      become: yes
      copy:
        backup: yes
        content: "{{ updated_ign.stdout }}"
        dest: "{{ worker_ign }}"

    - name: Get list of PXE files with -NOOP suffix
      find:
        paths: "{{ pxe_path }}"
        patterns: "*-NOOP"
      register: noops

    - name: Copy -NOOP PXE files to reachable paths
      become: yes
      copy:
        remote_src: yes
        src: "{{ item.path }}"
        dest: "{{ item.path | regex_replace('-NOOP$') }}"
      loop: "{{ noops.files }}"

    - name: Restart tftp socket
      become: yes
      systemd:
        name: tftp.socket
        state: restarted

    - name: Uncomment workers in HAProxy config
      replace:
        backup: yes
        path: "/etc/haproxy/haproxy.cfg"
        regexp: '^\s+#\s+ server worker'
        replace: "         server worker"

    - name: Reload HAProxy config
      systemd:
        name: haproxy
        state: reloaded
[student@workstation pools-adding-workers]$
