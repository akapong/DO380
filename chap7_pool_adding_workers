[student@workstation pools-adding-workers]$ pwd
/home/student/DO380/labs/pools-adding-workers
[student@workstation pools-adding-workers]$ ls
approve-csrs.sh  prep-utility.yml
[student@workstation pools-adding-workers]$ cat approve-csrs.sh 
#!/bin/bash

count=0
previous=0

while [ ${count} -lt 6 ]; do
    # Count nodes named "worker" and output if the number has changed
    count=$(oc get nodes -o name | grep worker | wc -l)
    if [ ${previous} -ne ${count} ]; then
        echo "Worker count is ${count}."
        previous="${count}"
    fi

    # Approve pending CSRs
    oc get csr -o json | jq '.items[] | select(.status == {}) | .metadata.name' | xargs -r oc adm certificate approve

    sleep 2
done
[student@workstation pools-adding-workers]$ cat prep-utility.yml 
---
- name: Add new workers
  hosts: utility
  vars:
    pxe_path: "/var/lib/tftpboot/pxelinux.cfg/"
  tasks:
    - name: Set worker.ign fact
      set_fact:
        worker_ign: "/var/www/html/openshift4/ignitions/ocp4/worker.ign"

    - name: Fetch the api-int certificate
      get_certificate:
        host: api-int.ocp4.example.com
        port: 22623
      register: updated_cert

    - name: Create updated Ignition content
      command: >
        jq ".ignition.security.tls.certificateAuthorities[0].source = \"data:text/plain;charset=utf-8;base64,{{ updated_cert.cert | b64encode }}\"" "{{ worker_ign }}"
      register: updated_ign

    - name: Write worker Ignition file
      become: yes
      copy:
        backup: yes
        content: "{{ updated_ign.stdout }}"
        dest: "{{ worker_ign }}"

    - name: Get list of PXE files with -NOOP suffix
      find:
        paths: "{{ pxe_path }}"
        patterns: "*-NOOP"
      register: noops

    - name: Copy -NOOP PXE files to reachable paths
      become: yes
      copy:
        remote_src: yes
        src: "{{ item.path }}"
        dest: "{{ item.path | regex_replace('-NOOP$') }}"
      loop: "{{ noops.files }}"

    - name: Restart tftp socket
      become: yes
      systemd:
        name: tftp.socket
        state: restarted

    - name: Uncomment workers in HAProxy config
      replace:
        backup: yes
        path: "/etc/haproxy/haproxy.cfg"
        regexp: '^\s+#\s+ server worker'
        replace: "         server worker"

    - name: Reload HAProxy config
      systemd:
        name: haproxy
        state: reloaded
[student@workstation pools-adding-workers]$

[student@workstation pools-adding-workers]$ ssh lab@utility \
> cat /etc/haproxy/haproxy.cfg
#---------------------------------------------------------------------
# Example configuration for a possible web application.  See the
# full configuration options online.
#
#   https://www.haproxy.org/download/1.8/doc/configuration.txt
#
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # to have these messages end up in /var/log/haproxy.log you will
    # need to:
    #
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the '-r' option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    #
    # 2) configure local2 events to go to the /var/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    #
    #    local2.*                       /var/log/haproxy.log
    #
    log         127.0.0.1 local2

    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     4000
    user        haproxy
    group       haproxy
    daemon

    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats

    # utilize system-wide crypto-policies
    ssl-default-bind-ciphers PROFILE=SYSTEM
    ssl-default-server-ciphers PROFILE=SYSTEM

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    option http-server-close
    option forwardfor       except 127.0.0.0/8
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 3000

# ---------------------------------------------------------------------
# Exposing HAProxy Statistic Page
# ---------------------------------------------------------------------
listen stats
    bind :32700
    stats enable
    stats uri /
    stats hide-version
    stats auth admin:RedH@t322


# BEGIN ANSIBLE MANAGED HAPROXY CONFIG for ocp4.example.com
#---------------------------------------------------------------------
# round robin balancing for OCP4 Kubernetes API Server
#---------------------------------------------------------------------
frontend k8s_api_ocp4
  bind 192.168.50.254:6443
  mode tcp
  default_backend k8s_api_backend_ocp4
backend k8s_api_backend_ocp4
  balance roundrobin
  mode tcp
  # example:
    server master01 192.168.50.10:6443 check
    server master02 192.168.50.11:6443 check
    server master03 192.168.50.12:6443 check
                  
# ---------------------------------------------------------------------
# round robin balancing for OCP4 Machine Config Server
# ---------------------------------------------------------------------
frontend machine_config_ocp4
  bind 192.168.50.254:22623
  mode tcp
  default_backend machine_config_backend_ocp4
backend machine_config_backend_ocp4
  balance roundrobin
  mode tcp
  # example:
    server master01 192.168.50.10:22623 check
    server master02 192.168.50.11:22623 check
    server master03 192.168.50.12:22623 check
                  
# ---------------------------------------------------------------------
# round robin balancing for OCP4 Ingress Insecure Port
# ---------------------------------------------------------------------
frontend ingress_insecure_ocp4
  bind 192.168.50.254:80
  mode tcp
  default_backend ingress_insecure_backend_ocp4
backend ingress_insecure_backend_ocp4
  balance roundrobin
  mode tcp
  # example:
  # server master01 192.168.50.10:80 check
    server master01 192.168.50.10:80 check
    server master02 192.168.50.11:80 check
    server master03 192.168.50.12:80 check
    server worker01 192.168.50.13:80 check
    server worker02 192.168.50.14:80 check
    server worker03 192.168.50.15:80 check
    server worker04 192.168.50.16:80 check
    server worker05 192.168.50.17:80 check
    server worker06 192.168.50.18:80 check
      
# ---------------------------------------------------------------------
# round robin balancing for OCP4 Ingress Secure Port
# ---------------------------------------------------------------------
frontend ingress_secure_ocp4
  bind 192.168.50.254:443
  mode tcp
  default_backend ingress_secure_backend_ocp4
backend ingress_secure_backend_ocp4
  balance roundrobin
  mode tcp
  # example:
  # server master01 192.168.50.10:443 check
    server master01 192.168.50.10:443 check
    server master02 192.168.50.11:443 check
    server master03 192.168.50.12:443 check
    server worker01 192.168.50.13:443 check
    server worker02 192.168.50.14:443 check
    server worker03 192.168.50.15:443 check
    server worker04 192.168.50.16:443 check
    server worker05 192.168.50.17:443 check
    server worker06 192.168.50.18:443 check
      

# END ANSIBLE MANAGED HAPROXY CONFIG for ocp4.example.com
[student@workstation pools-adding-workers]$ 
